# From: https://about.gitlab.com/2017/09/21/how-to-create-ci-cd-pipeline-with-autodeploy-to-kubernetes-using-gitlab-and-helm/
variables:
  GIT_TRACE: "2"
  GIT_CURL_VERBOSE: "2"
  GIT_TRACE_PERFORMANCE: "2"
  GIT_TRACE_PACK_ACCESS: "2"
  GIT_TRACE_PACKET: "2"
  GIT_TRACE_PACKFILE: "2"
  GIT_TRACE_SETUP: "2"
  GIT_TRACE_SHALLOW: "2"
  GIT_SSH_COMMAND: "ssh -vvv"

before_script:
  - go version || echo "Go executable not found."
  - echo $CI_BUILD_REF
  - echo $CI_PROJECT_DIR
  - echo $HOME
  - echo $PWD
  - cat ./cert.pem
  - git config --global http.sslbackend openssl
  - git config --global http.sslCAInfo ./cert.pem
  - openssl s_client -connect git.xx.network:443
  - eval $(ssh-agent -s)
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - ssh-keyscan -t rsa $GITLAB_SERVER > ~/.ssh/known_hosts
  - git config --global url."git@$GITLAB_SERVER:elixxir/".insteadOf "https://gitlab.com/elixxir/"
  - git config --global url."git@$GITLAB_SERVER:xx_network/".insteadOf "https://gitlab.com/xx_network/" --add
  - git config --global url."git@$GITLAB_SERVER:elixxir/".insteadOf "https://git.xx.network/elixxir/" --add
  - git config --global url."git@$GITLAB_SERVER:xx_network/".insteadOf "https://git.xx.network/xx_network/" --add
  - export PATH=$HOME/go/bin:$PATH
  #- go env -w GOPROXY=direct
  # Clear out old locally-cached tags
  - git tag -l | xargs git tag -d
  - git fetch --tags
  # Uncomment below to set GOPATH to where it is downloaded
  - go env -w GOPATH=$PWD/.go
  - go env

stages:
  - build
  - trigger_integration

build:
  stage: build
  image: elixxirlabs/cuda-go:go1.16-cuda11.1
  script:
    - git clean -ffdx
    - go mod vendor -v
    - go build ./...
    - go mod tidy

    - mkdir -p testdata
    - go-acc --covermode atomic --output testdata/coverage.out ./... -- -v
    - go tool cover -func=testdata/coverage.out
    - go tool cover -html=testdata/coverage.out -o testdata/coverage.html

    # Test Coverage Check
    - go tool cover -func=testdata/coverage.out | grep "total:" | awk '{print $3}' | sed 's/\%//g' > testdata/coverage-percentage.txt
    - export CODE_CHECK=$(echo "$(cat testdata/coverage-percentage.txt) >= $MIN_CODE_COVERAGE" | bc -l)
    - (if [ "$CODE_CHECK" == "1" ]; then echo "Minimum coverage of $MIN_CODE_COVERAGE succeeded"; else echo "Minimum coverage of $MIN_CODE_COVERAGE failed"; exit 1; fi);
    - mkdir -p release
    - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags '-w -s' ./...
    - cd release
  artifacts:
    paths:
      - .go/
      - vendor/
      - testdata/
      - release/
    when: always

trigger_integration:
  stage: trigger_integration
  trigger:
    project: elixxir/integration
    branch: $CI_COMMIT_REF_NAME
  only:
    - release
    - master
